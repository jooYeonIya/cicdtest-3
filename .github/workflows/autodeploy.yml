name: Deploy to EC2

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on:  ubuntu-latest

    steps:
      - name: source code checkout  # 저장소에서 코드 가져오기
        uses: actions/checkout@v4

      - name: jdk install # jdk 설치하고 애플리케이션 빌드하기
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: application build # gradle로 빌드하기
        run:  |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Docker 이미지 생성 & tag 붙이기
        run:  docker build -t ${{ secrets.DOCKER_USER }}/web-app:latest .

      - name: dockerhub login # dockerhub로 로그인하기
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCER_PASSWORD }}

      - name: dockerhub 에 생성한 이미지 push
        run:  docker push ${{ secrets.DOCKER_USER }}/web-app:latest

  deploy:
    runs-on:  ubuntu-latest

    steps: # EC2에 접속하기(SSH)
      - name: SSH로 EC2 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            docker pull ${{ secrets.DOCKER_USER }}/web-app:latest
            # 기존 컨테이너가 있으면 중지하고 삭제
            docker stop web-app || true
            docker rm web-app || true
            # 새로운 컨테이너 실행
            docker run -d -p 8080:8080 --name web-app ${{ secrets.DOCKER_USER }}/web-app:latest